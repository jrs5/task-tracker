# generated by datamodel-codegen:
#   filename:  spec.yaml
#   timestamp: 2025-01-08T23:53:00+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, ConfigDict, Field


class Priority(Enum):
    low = "low"
    medium = "medium"
    high = "high"


class Task(BaseModel):
    model_config = ConfigDict(
        extra="allow",
        populate_by_name=True,
    )
    id: str = Field(..., description="The unique identifier for the task")
    title: str = Field(..., description="The title of the task")
    description: str = Field(..., description="A detailed description of the task")
    due_date: datetime = Field(..., alias="dueDate", description="The due date for the task")
    completed: bool = Field(..., description="Whether the task is completed or not")
    priority: Optional[Priority] = Field(None, description="The priority level of the task")


class GetTasks(BaseModel):
    model_config = ConfigDict(
        extra="allow",
        populate_by_name=True,
    )
    data: List[Task]


class TaskCreate(BaseModel):
    model_config = ConfigDict(
        extra="allow",
        populate_by_name=True,
    )
    title: str = Field(..., description="The title of the task")
    description: str = Field(..., description="A detailed description of the task")
    due_date: datetime = Field(..., alias="dueDate", description="The due date for the task")
    priority: Optional[Priority] = Field(None, description="The priority level of the task")
    completed: Optional[bool] = Field(False, description="Whether the task is completed (defaults to false)")


class TaskUpdate(BaseModel):
    model_config = ConfigDict(
        extra="allow",
        populate_by_name=True,
    )
    title: Optional[str] = Field(None, description="The title of the task")
    description: Optional[str] = Field(None, description="A detailed description of the task")
    due_date: Optional[datetime] = Field(None, alias="dueDate", description="The due date for the task")
    completed: Optional[bool] = Field(None, description="Whether the task is completed")
    priority: Optional[Priority] = Field(None, description="The priority level of the task")


class Error(BaseModel):
    model_config = ConfigDict(
        extra="allow",
        populate_by_name=True,
    )
    message: Optional[str] = Field(None, description="A description of the error")
    code: Optional[int] = Field(None, description="The HTTP status code")
