[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "task-tracker"
version = "1.0.0"
description = "A simple API to manage personal tasks or to-do lists"
authors = ["jrs5"]
readme = "README.md"
packages = [
    {"include"="task_tracker", from="src"},
    {"include"="main.py", from="src"},
]

[tool.poetry.dependencies]
python = "3.13.1"
aws-lambda-powertools = "3.4.0"
boto3 = "1.35.94"
httpx = "0.28.1"
fastapi = "0.115.6"
mangum = "0.19.0"
pydantic = "2.10.4"
pydantic-settings = "2.7.1"
python-dotenv = "1.0.1"
typing-extensions = "4.12.2"


[tool.poetry.group.dev.dependencies]
boto3-stubs = {extras = ["essential"], version = "1.35.94"}
coverage = "7.6.10"
aws-cdk-lib = "2.174.0"
constructs = "^10.0.0"
datamodel-code-generator = "0.26.4"
moto = "5.0.26"
mypy = "1.14.1"
pytest = "8.3.4"
poetry-plugin-bundle = "1.5.0"
pytest-dotenv = "0.5.2"
pytest-env = "1.1.5"
pytest-httpx = "0.35.0"
pytest-mock = "3.14.0"
ruff = "0.8.6"
types-requests = "2.32.0.20241016"
uvicorn = "0.34.0"


[tool.ruff]
exclude = [".env", ".venv", "venv", "notebooks"]
line-length = 120
output-format = "full"

[tool.ruff.lint]
fixable = ["I"]
ignore = ["E501"]
select = ["E", "F", "I", "W"]

[tool.coverage.paths]
source = ["src"]

[tool.coverage.run]
branch = true
relative_files = true

[tool.coverage.report]
show_missing = true
fail_under = 80

[tool.mypy]
check_untyped_defs = true
disallow_any_unimported = true
disallow_untyped_defs = true
exclude = ["venv/", ".venv/", "dist/", "cdk/cdk.out/"]
explicit_package_bases = true
ignore_missing_imports = true
mypy_path = "src"
no_implicit_optional = true
plugins = ["pydantic.mypy"]
python_version = "3.13"
show_error_codes = true
warn_return_any = true
warn_unused_ignores = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pyright]
reportArgumentType = false
reportCallIssue = false
reportTypedDictNotRequiredAccess = false

[tool.pytest.ini_options]
pythonpath = ["src"]
env_files = [".env.test"]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning"
]
